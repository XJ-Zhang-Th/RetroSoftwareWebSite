<html>
<body style="font-size:9pt;line-height=150%" bgcolor="#FFFFF">
<p><span style="font-family:宋体;font-size:12pt">
指针与数组的关系</span>

</p>

<hr size="1" color="#000080"><br>
      <tr>
　　指针与数组是C语言中很重要的两个概念，它们之间有着密切的关系，利用这种关系，可以增强处理数组的灵活性，加快运行速度，本文着重讨论指针与数组之间的联系及在编程中的应用。<br>
        　　1．指针与数组的关系<br>
        　　当一个指针变量被初始化成数组名时，就说该指针变量指向了数组。如：<br>
        　　char str[20], ＊ptr;<br>
        　　ptr=str;<br>
        　　ptr被置为数组str的第一个元素的地址，因为数组名就是该数组的首地址，也是数组第一个元素的地址。此时可以认为指针ptr就是数组str（反之不成立），这样原来对数组的处理都可以用指针来实现。如对数组元素的访问，既可以用下标变量访问，也可以用指针访问。<br>
        　　2．指向数组元素的指针<br>
        　　若有如下定义：<br>
        　　int a[10], ＊pa;<br>
        　　pa=a;<br>
        　　则p=＆a[0]是将数组第1个元素的地址赋给了指针变量p。<br>
        　　实际上，C语言中数组名就是数组的首地址，所以第一个元素的地址可以用两种方法获得：p=＆a[0]或p=a。<br>
        　　这两种方法在形式上相像，其区别在于：pa是指针变量，a是数组名。值得注意的是：pa是一个可以变化的指针变量，而a是一个常数。因为数组一经被说明，数组的地址也就是固定的，因此a是不能变化的，不允许使用a＋＋、＋＋a或语句a＋=10，而pa＋＋、＋＋pa、pa＋=10则是正确的。由此可见，此时指针与数组融为一体。<br>
        　　3．指针与一维数组<br>
        　　理解指针与一维数组的关系，首先要了解在编译系统中，一维数组的存储组织形式和对数组元素的访问方法。<br>
        　　一维数组是一个线形表，它被存放在一片连续的内存单元中。C语言对数组的访问是通过数组名（数组的起始地址）加上相对于起始地址的相对量（由下标变量给出），得到要访问的数组元素的单元地址，然后再对计算出的单元地址的内容进行访问。通常把数据类型所占单元的字节个数称为扩大因子。<br>
        　　实际上编译系统将数组元素的形式a[i]转换成＊(a＋i)，然后才进行运算。对于一般数组元素的形式：&lt;数组名&gt;[&lt;下标表达式&gt;]，编译程序将其转换成：＊(&lt;数组名&gt;＋&lt;下标表达式&gt;)，其中下标表达式为：下标表达式＊扩大因子。整个式子计算结果是一个内存地址，最后的结果为：＊&lt;地址&gt;=&lt;地址所对应单元的地址的内容&gt;。由此可见，C语言对数组的处理，实际上是转换成指针地址的运算。<br>
        　　数组与指针暗中结合在一起。因此，任何能由下标完成的操作，都可以用指针来实现，一个不带下标的数组名就是一个指向该数组的指针。<br>
        　　4．指针与多维数组<br>
        　　用指针变量可以指向一维数组，也可以指向多维数组。但在概念上和使用上，多维数组的指针比一维数组的指针要复杂一些。<br>
        　　例如，在一个三维数组中，引用元素c[i][j][k]的地址计算最终将换成：＊(＊(＊(c＋i)＋j)＋k)。了解了多维数组的存储形式和访问多维数组元素的内部转换公式后，再看当一个指针变量指向多维数组及其元素的情况。<br>
        　　(1)指向数组元素的指针变量<br>
        　　若有如下说明：<br>
        　　int a[3][4];<br>
        　　int ＊p;<br>
        　　p=a;<br>
        　　p是指向整型变量的指针；p=a使p指向整型二维数组a的首地址。<br>
        　　＊(＊(p＋1)＋2)表示取a[1][2]的内容；＊p表示取a[0][1]的内容，因为p是指向整型变量的指针；p＋＋表示p的内容加1，即p中存放的地址增加一个整型量的字节数2，从而使p指向下一个整型量a[0][1]。<br>
        　　(2)指向由j个整数组成的一维数组的指针变量<br>
        　　当指针变量p不是指向整型变量，而是指向一个包含j个元素的一维数组。如果p=a[0]，则p＋＋不是指向a[0][1]，而是指向a[1]。这时p的增值以一维数组的长度为单位。<br>
        　　5．指针与字符数组<br>
        　　C语言中许多字符串操作都是由指向字符数组的指针及指针的运算来实现的。因为对于字符串来说，一般都是严格的顺序存取方式，使用指针可以打破这种存取方式，更为灵活地处理字符串。<br>
        　　另外由于字符串以′\0′作为结束符，而′\0′的ASCII码是0，它正好是C语言的逻辑假值，所以可以直接用它作为判断字符串结束的条件，而不需要用字符串的长度来判断。C语言中类似的字符串处理函数都是用指针来完成，使程序运行速度更快、效率更高，而且更易于理解。(黑龙江　梁伟)<strong></p>
        </strong></font><p align="right"><span class="ourfont"><font color="#369681">本文出自：</font><a
        href="index.htm">《电脑报》1999年02月08日第06期</a></span></td>
      </tr>
    </table>
    </center></div></td>
  </tr>
</table>
</center></div>
</body>
</html>
